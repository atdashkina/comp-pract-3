import numpy as np

# Определение функции
def f(x):
    return x**4 / (23 + x**2)

# Метод прямоугольников
def rectangle_method(a, b, n):
    h = (b - a) / n
    result = 0.0
    for i in range(n):
        result += f(a + i * h)
    result *= h
    return result

# Метод трапеций
def trapezoid_method(a, b, n):
    h = (b - a) / n
    result = (f(a) + f(b)) / 2
    for i in range(1, n):
        result += f(a + i * h)
    result *= h
    return result

# Метод Симпсона
def simpson_method(a, b, n):
    if n % 2 == 1:
        n += 1  # n должно быть четным
    h = (b - a) / n
    result = f(a) + f(b)
    for i in range(1, n):
        factor = 4 if i % 2 == 1 else 2
        result += factor * f(a + i * h)
    result *= h / 3
    return result

# Параметры интегрирования
a = 1.0
b = 2.0
tolerance = 1e-6

# Число шагов
n = 1000

# Вычисление интегралов
rect_result = rectangle_method(a, b, n)
trap_result = trapezoid_method(a, b, n)
simp_result = simpson_method(a, b, n)

print(f"Метод прямоугольников: {rect_result:.6f}")
print(f"Метод трапеций: {trap_result:.6f}")
print(f"Метод Симпсона: {simp_result:.6f}")
